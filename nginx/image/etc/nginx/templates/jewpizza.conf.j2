{%- macro server_name(subdomains=[], catch_all=False) -%}
    listen 443 ssl http2{% if catch_all %} default_server{% endif %};
    listen [::]:443 ssl http2{% if catch_all %} default_server{% endif %};

    ssl_certificate /etc/letsencrypt/live/{{ environ('DOMAIN_NAME') }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ environ('DOMAIN_NAME') }}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/{{ environ('DOMAIN_NAME') }}/chain.pem;
    ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;

    {% if subdomains %}
        {% for subdomain in subdomains %}
            server_name {{ subdomain }}.{{ environ('DOMAIN_NAME') }};  # certbot_domain:*.{{ environ('DOMAIN_NAME') }}
        {% endfor %}
    {% elif catch_all %}
        # Multiple server_name commands with "_" are ignored by nginx, but we
        # trick docker-nginx-certbot scripts here to register multiple domains
        server_name _;  # certbot_domain:{{ environ('DOMAIN_NAME') }}
        server_name _;  # certbot_domain:*.{{ environ('DOMAIN_NAME') }}
        {% for extra_domain in (environ('NGINX_REDIRECT_DOMAINS') or '').strip().split() %}
            server_name _;  # certbot_domain:{{ extra_domain }}
            server_name _;  # certbot_domain:*.{{ extra_domain }}
        {% endfor %}
    {% else %}
        server_name {{ environ('DOMAIN_NAME') }};
    {% endif %}
{%- endmacro -%}

# Cache values
map $sent_http_content_type $expires {
    default                    off;
    text/html                  epoch;
    text/css                   30d;
    application/javascript     30d;
    ~image/                    30d;
    ~font/                     30d;
}

upstream app { server app:8000; }
upstream logs { server logs:8080; }
upstream sse { server sse:8001; }
upstream umami { server umami:3000; }
upstream icecast { server icecast:8888; }

# {{ environ('DOMAIN_NAME') }}, main Django app
server {
    {{ server_name() }}

    include proxy_busy_error;

    location = /favicon.ico {
        return 204;
        access_log off;
        log_not_found off;
    }

    {% if not environ('DEBUG')|int %}
        # /static and /media enabled when DEBUG=1
        location /static {
            expires $expires;
            alias /serve/static;
        }

        location /media {
            expires $expires;
            alias /serve/media;
        }
    {% else %}
        # /static and /media disabled when DEBUG=0
    {% endif -%}

    # sse service
    location /sse/ {
        include proxy_params;
        proxy_buffering off;
        proxy_cache off;
        proxy_pass http://sse/;
    }

    # Logs service only accessible by X-Accel-Redirect in Django app (internal)
    location /protected/cmsadmin/tools/logs/ {
        internal;
        include proxy_params;
        proxy_buffering off;
        proxy_cache off;
        proxy_pass http://logs/cmsadmin/tools/logs/;
    }

    location /protected/cmsadmin/tools/nchan/ {
        internal;
        nchan_stub_status;
    }

    location / {
        include proxy_params;
        proxy_pass http://app;
    }
}

# Umami analytics
server {
    {{ server_name(['umami', 'analytics']) }}

    include proxy_busy_error;

    # uBlockOrigin breaks /umami.js
    location = /script.js {
        rewrite ^.*$ /umami.js last;
    }

    location / {
        include proxy_params;
        proxy_pass http://umami;
    }
}

# radio service
server {
    {{ server_name(['radio']) }}

    include proxy_busy_error;

    location / {
        include proxy_params;
        proxy_pass http://icecast;
    }
}

{% for subdomain in (environ('NGINX_EXTRA_SUBDOMAINS') or '').strip().split() %}
    {% set subdomain, mode = subdomain, 'noindex' %}
    {% if ':' in subdomain %}
        {% set subdomain, mode = subdomain.split(':') %}
    {% endif %}
    # subdomain "{{ subdomain }}" ({{ mode }})
    server {
        {{ server_name([subdomain]) }}

        root /serve/{{ subdomain }};
        {% if mode == 'autoindex' %}autoindex on;{% endif %}

        location = /robots.txt {
            add_header Content-Type text/plain;
            return 200 "User-agent: *\nDisallow: /\n";
        }

        location / {
            try_files $uri $uri/ {% if mode == 'index' %}$uri/index.html {% endif %}=404;
        }
    }
{% endfor %}

# Catch-all subdomain redirect to Django app (include www.{{ environ('DOMAIN_NAME') }})
server {
    {{ server_name(catch_all=True) }}

    return 302 https://{{ environ('DOMAIN_NAME') }}$request_uri;
}
