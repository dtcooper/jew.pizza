{%- set DEV_MODE = environ('DEV_MODE')|int != 0 -%}
{%- set DOMAIN_NAME = environ("DOMAIN_NAME") -%}
{%- set REDIRECT_DOMAIN_NAMES = (environ("REDIRECT_DOMAIN_NAMES") or '').strip().split() -%}
{%- set EXTRA_SUBDOMAINS = (environ('EXTRA_SUBDOMAINS') or '').strip().split() -%}
# Rendered jinja2 nginx config

# DEV_MODE = {{ DEV_MODE|tojson }}
# DOMAIN_NAME = {{ DOMAIN_NAME|tojson }}
# REDIRECT_DOMAIN_NAMES = {{ REDIRECT_DOMAIN_NAMES|tojson }}
# EXTRA_SUBDOMAINS = {{ EXTRA_SUBDOMAINS|tojson }}

{% macro server_name(subdomains=None, catch_all=False) -%}
    # Server name for {% if subdomains %}subdomain(s)={{ subdomains|tojson }}{% else %}{{ DOMAIN_NAME }}{% endif %} / catch_all={{ catch_all|tojson }}
    {%- if subdomains is string -%}
        {%- set subdomains = [subdomains] -%}
    {%- endif -%}

    {% if subdomains %}
      {% for subdomain in subdomains %}
        server_name {{ subdomain }}.{{ DOMAIN_NAME }};  # certbot_domain:*.{{ DOMAIN_NAME }}
      {% endfor %}
    {% elif catch_all %}
        # Multiple server_name commands with "_" are ignored by nginx, but we
        # trick docker-nginx-certbot scripts here to register multiple domains
        server_name _;  # certbot_domain:{{ DOMAIN_NAME }}
        server_name _;  # certbot_domain:*.{{ DOMAIN_NAME }}
        {% for redirect_domain_name in REDIRECT_DOMAIN_NAMES %}
            # Redirect domain: {{ redirect_domain_name }}
            server_name _;  # certbot_domain:{{ redirect_domain_name }}
            server_name _;  # certbot_domain:*.{{ redirect_domain_name }}
        {% endfor %}
    {% else %}
        server_name {{ DOMAIN_NAME }};
    {% endif %}

    listen 443 ssl{% if catch_all %} default_server reuseport{% endif %};
    listen [::]:443 ssl{% if catch_all %} default_server reuseport{% endif %};
    http2 on;

    ssl_certificate /etc/letsencrypt/live/{{ DOMAIN_NAME }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ DOMAIN_NAME }}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/{{ DOMAIN_NAME }}/chain.pem;
    ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
    include options-ssl-nginx.conf;
{%- endmacro -%}

map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

server {
  {{ server_name() }}

  location /cmsadmin {
    include proxy_params;
    proxy_pass http://backend:8000;
    add_header X-JewPizza-Info "backend/cmsadmin" always;
  }

  location /__internal__/cmsadmin/tools/logs/ {
    internal;
    include proxy_params;
    proxy_buffering off;
    proxy_cache off;
    proxy_pass http://logs:8000/cmsadmin/tools/logs/;
    add_header X-JewPizza-Info "internal/logs" always;
  }

  location /backend-static {
    {% if DEV_MODE %}
      include proxy_params;
      proxy_pass http://backend:8000;
      add_header X-JewPizza-Info "backend/static-proxy" always;
    {% else %}
      alias /static/backend;
      add_header X-JewPizza-Info "static/backend" always;
    {% endif %}
  }

  {% if not DEV_MODE %}
    location /_app/immutable/ {
      root /static/frontend;
      expires max;
      add_header Cache-Control "public, immutable";
      add_header X-JewPizza-Info "static/frontend/immutable" always;
      access_log off;
      try_files $uri @frontend;
    }

    location / {
      root /static/frontend;
      add_header X-JewPizza-Info "static/frontend" always;
      try_files $uri @frontend;
    }
  {% endif %}

  location {% if DEV_MODE %}/{% else %}@frontend{% endif %} {
    include proxy_params;
    add_header X-JewPizza-Info "frontend" always;
    {% if DEV_MODE %}
      # Support hmr (hot module reload) via websockets in DEV_MODE
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
    {% endif %}
    proxy_pass http://frontend:8000;
  }
}

server {
  {{ server_name(["a", "analytics"]) }}

  location / {
    include proxy_params;
    add_header X-JewPizza-Info "analytics" always;
    proxy_pass http://analytics:8000;
  }
}

{% for subdomain in EXTRA_SUBDOMAINS %}
    {% set subdomain, mode = subdomain, 'noindex' %}
    {% if ':' in subdomain %}
        {% set subdomain, mode = subdomain.split(':') %}
    {% endif %}
    # subdomain: {{ subdomain }} (mode: {{ mode }})
    server {
        {{ server_name(subdomain) }}

        add_header X-JewPizza-Info "subdomain/{{ subdomain }}" always;

        root /subdomains/{{ subdomain }};
        {% if mode == 'autoindex' %}autoindex on;{% endif %}

        location = /robots.txt {
            add_header Content-Type text/plain;
            return 200 "User-agent: *\nDisallow: /\n";
        }

        location / {
            try_files $uri $uri/{% if mode == 'index' %} $uri/index.html{% endif %} =404;
        }
    }
{% endfor %}

server {
  {{ server_name(catch_all=True) }}

  add_header X-JewPizza-Info "redirect" always;
  return 302 https://{{ DOMAIN_NAME }}$request_uri;
}
