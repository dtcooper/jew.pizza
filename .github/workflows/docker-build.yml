name: Build & Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy:
        description: Deploy
        required: false
        default: false

concurrency:
  group: main
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-20.04
    name: Build container
    env:
      DOCKERHUB_USERNAME: jewpizza
    strategy:
      matrix:
        container: [app, icecast, nginx, radio]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Build container
        uses: ./.github/actions/docker-build-push
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          container: ${{ matrix.container }}

  deploy:
    runs-on: ubuntu-20.04
    name: Deploy
    env:
      SSH_DIRECTORY: jewpizza
    needs: [build]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set variables
        id: vars
        # Detect "[deploy]" string in commit message
        run: echo "::set-output name=deploy-in-sha::$(git log -1 --format='%B' HEAD | fgrep -qi '[deploy]' && echo 1)"
      -
        name: Deploy containers
        uses: ./.github/actions/deploy
        # Only if explicit in workflow dispatch, or if "[deploy]" is in commit message
        if: >-
          (github.event_name != 'workflow_dispatch' && steps.vars.outputs.deploy-in-sha == '1')
          || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy)
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          fingerprint: ${{ secrets.SSH_FINGERPRINT }}
          directory: ${{ env.SSH_DIRECTORY }}

  test:
    runs-on: ubuntu-20.04
    name: Tests
    needs: [build]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Run tests
        run: |
          cp -v .env.sample .env
          echo 'Updating .env file for testing'
          sed -i 's/^\(SECRET_KEY\)=.*$/\1=hackme/' .env
          sed -i 's/^\(DEBUG\)=.*$/\1=0/' .env
          docker compose pull --quiet app
          docker compose run --quiet-pull --no-TTY app sh -c 'pip install -r requirements-tests.txt && pytest'
